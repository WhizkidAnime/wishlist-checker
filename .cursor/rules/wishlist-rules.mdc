---
description: 
globs: 
alwaysApply: true
---
---
description: "Правила для AI-ассистента ('Windsurf') при разработке одностраничного приложения 'Мой Вишлист'"
globs: ["**/*.{js,jsx,ts,tsx,html,css}"] # Применяем к JS/React/TS, HTML и CSS файлам
alwaysApply: true
---

# Правила разработки приложения "Мой Вишлист"

## 1. Общие принципы и взаимодействие с AI

*   **Цель проекта:** Создание прогрессивного веб-приложения (PWA) для управления списком желаний с системой категорий. Дизайн минималистичный, вдохновленный главной страницей ChatGPT (центральный блок-карточка с тенью и скруглениями на простом фоне). Данные хранятся в Local Storage.
*   **PWA статус:** Приложение полностью готово для установки на любое устройство с кастомными иконками, standalone режимом и cross-platform поддержкой.
*   **Система категорий:** Реализована полная система категорий с вкладками, инлайн созданием, фильтрацией и персистентностью.
*   **Пошаговая разработка:** Всегда фокусируйся **только на текущем шаге**, описанном в запросе пользователя. Не пытайся реализовать функционал из будущих шагов.
*   **Контекст:** Помни, что мы используем **React** (с функциональными компонентами и хуками) и **Tailwind CSS** для стилизации.
*   **Качество кода:** Генерируемый код должен быть чистым, понятным, современным (ES6+), поддерживаемым и следовать лучшим практикам React и JavaScript.
*   **Завершенность шага:** Предоставляй полный, рабочий код для выполнения конкретного шага (например, целый компонент или функцию), включая необходимые импорты и базовую структуру.
*   **Зависимости:** Четко указывай, какие библиотеки нужно установить или импортировать для работы сгенерированного кода.

## 2. React и JavaScript/TypeScript

*   **Компоненты:** Используй **функциональные компоненты** с **хуками** (`useState`, `useEffect`, `useContext` и т.д.).
*   **Архитектура:** Проект использует централизованное состояние в App.tsx с props drilling. Специализированные хуки: `useCategories` для управления категориями.
*   **Структура:** Придерживайся логичной структуры папок и файлов (например, `src/components`, `src/App.js`, `src/utils`). Компоненты должны быть по возможности небольшими и переиспользуемыми.
*   **Состояние:** Для управления состоянием используй встроенные хуки React (`useState`, `useReducer`). Для глобального состояния (если понадобится, например, для курсов валют) можно использовать `useContext`.
*   **Props:** Используй понятные имена для props. Если используется TypeScript, всегда определяй типы для props (interfaces). Если JavaScript – желательно использовать `PropTypes` для валидации.
*   **Чистота кода:** Используй осмысленные имена переменных и функций. Избегай излишне вложенных конструкций. Добавляй комментарии только для сложной или неочевидной логики.
*   **Асинхронность:** Используй `async/await` для асинхронных операций (например, для запроса курсов валют). Обеспечь обработку ошибок (блоки `try...catch`).

## 3. Tailwind CSS и Стилизация

*   **Основной инструмент:** **Tailwind CSS** является *единственным* инструментом для стилизации. Избегай написания отдельного CSS или использования `<style>` тегов, кроме как для базовых глобальных стилей в `index.css` (например, импорт Tailwind директив).
*   **Дизайн "а-ля ChatGPT":** Строго придерживайся заданного стиля:
    *   Светлый, нейтральный фон страницы (`bg-gray-50` / `bg-neutral-100`).
    *   Основной контент в центральном блоке (`max-w-Xxl`, `mx-auto`, `bg-white`).
    *   Закругленные углы (`rounded-lg` / `rounded-xl`).
    *   Тени (`shadow-lg` / `shadow-xl`).
    *   Достаточные внутренние (`p-4` / `p-6`) и внешние (`my-8`) отступы.
*   **Mobile-First:** Всегда разрабатывай стили с подходом **Mobile-First**. Сначала стили для малых экранов, затем добавляй префиксы (`sm:`, `md:`, `lg:`) для адаптации к большим экранам.
*   **Консистентность:** Используй согласованные значения для отступов, размеров шрифтов, цветов из палитры Tailwind. Не создавай избыточных кастомных классов, если можно обойтись утилитами Tailwind.
*   **Интерактивность:** Применяй классы Tailwind для состояний `:hover`, `:focus`, `:active` для всех интерактивных элементов (кнопки, ссылки, поля ввода, чекбоксы). Используй `transition` для плавности.

## 4. Управление данными (Local Storage)

*   **Источник данных:** На данном этапе единственным источником хранения пользовательских данных (списка желаний и категорий) является **Local Storage** браузера.
*   **Двойное хранение:** Товары сохраняются в ключе `'wishlistItems'`, категории в `'wishlistCategories'`.
*   **Сериализация:** Всегда используй `JSON.stringify()` при сохранении данных в Local Storage и `JSON.parse()` при их чтении.
*   **Обработка ошибок:** Добавляй обработку ошибок (`try...catch`) при чтении и парсинге данных из Local Storage на случай поврежденных данных или их отсутствия.
*   **Структура данных:** Придерживайся согласованной структуры объекта для элемента вишлиста (например, `{ id, itemType, name, link, price, currency, isBought, category? }`).

## 5. PWA и Система категорий

*   **PWA конфигурация:** Проект полностью настроен как PWA с manifest.json, кастомными иконками и standalone режимом.
*   **Категории:** Реализована умная система категорий где "Все" показывает только товары без категории, а поиск работает глобально.
*   **Иконки:** Используются векторные SVG иконки с градиентным дизайном для всех размеров экранов.
*   **Кроссплатформенность:** Полная поддержка iOS Safari, Android Chrome, Desktop браузеров.

## 6. Структура, Документация и Связи

*   **Импорты/Экспорты:** Убедись, что все компоненты и функции корректно экспортируются и импортируются там, где они используются.
*   **Комментарии:** Добавляй краткие комментарии для объяснения назначения компонентов, хуков или сложных участков кода.
*   **Читаемость:** Форматируй код для лучшей читаемости (отступы, переносы строк). Можно использовать Prettier с настройками по умолчанию.