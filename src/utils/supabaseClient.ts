import { createClient } from '@supabase/supabase-js';

// –ü–æ–ª—É—á–∞–µ–º URL –∏ –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö —Ñ–æ–ª–±–µ–∫–æ–≤)
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –ø—Ä—è–º–æ–π OAuth URL (iOS PWA —Å—Ü–µ–Ω–∞—Ä–∏–∏)
export const SUPABASE_URL = supabaseUrl;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('‚ö†Ô∏è Supabase credentials are missing. Running in local-only mode.');
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase (–µ—Å–ª–∏ credentials –¥–æ—Å—Ç—É–ø–Ω—ã)
export const supabase = supabaseUrl && supabaseAnonKey 
  ? (() => {
      const client = createClient<Database>(supabaseUrl, supabaseAnonKey, {
        auth: {
          // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π refresh —Ç–æ–∫–µ–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –≤ production
          autoRefreshToken: true,
          persistSession: true
        }
      });
      // console.log('‚úÖ Supabase client initialized successfully');
      return client;
    })()
  : (() => {
      // console.log('üì¶ Running in local storage mode (Supabase not configured)');
      return null;
    })();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
export const isSupabaseAvailable = (): boolean => {
  return supabase !== null;
};

// –¢–∏–ø—ã –¥–ª—è –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export interface Database {
  public: {
    Tables: {
      wishlist_items: {
        Row: {
          id: string;
          user_id: string;
          name: string;
          item_type: string | null;
          link: string;
          price: number;
          currency: string;
          is_bought: boolean;
          comment: string;
          category: string | null;
          sort_order: number;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          name: string;
          item_type?: string | null;
          link?: string;
          price?: number;
          currency?: string;
          is_bought?: boolean;
          comment?: string;
          category?: string | null;
          sort_order?: number;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          name?: string;
          item_type?: string | null;
          link?: string;
          price?: number;
          currency?: string;
          is_bought?: boolean;
          comment?: string;
          category?: string | null;
          sort_order?: number;
          created_at?: string;
          updated_at?: string;
        };
      };
      user_categories: {
        Row: {
          id: string;
          user_id: string;
          name: string;
          created_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          name: string;
          created_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          name?: string;
          created_at?: string;
        };
      };
      user_preferences: {
        Row: {
          user_id: string;
          theme: string;
          last_sync: string;
          updated_at: string;
        };
        Insert: {
          user_id: string;
          theme?: string;
          last_sync?: string;
          updated_at?: string;
        };
        Update: {
          user_id?: string;
          theme?: string;
          last_sync?: string;
          updated_at?: string;
        };
      };
    };
    Functions: {
      update_items_order: {
        Args: {
          p_user_id: string;
          p_item_orders: Array<{
            id: string;
            sort_order: number;
          }>;
        };
        Returns: boolean;
      };
    };
  };
} 