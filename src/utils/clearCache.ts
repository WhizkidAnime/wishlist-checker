/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö Service Workers
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
 */
export const clearAllCache = async (): Promise<void> => {
  console.log('üßπ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...');
  
  try {
    // 1. –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö Service Workers
    if ('serviceWorker' in navigator) {
      const registrations = await navigator.serviceWorker.getRegistrations();
      
      for (const registration of registrations) {
        console.log('üóëÔ∏è –£–¥–∞–ª—è—é Service Worker:', registration.scope);
        await registration.unregister();
      }
      
      if (registrations.length > 0) {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${registrations.length} Service Worker(s)`);
      }
    }
    
    // 2. –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      
      for (const cacheName of cacheNames) {
        console.log('üóëÔ∏è –£–¥–∞–ª—è—é –∫—ç—à:', cacheName);
        await caches.delete(cacheName);
      }
      
      if (cacheNames.length > 0) {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${cacheNames.length} –∫—ç—à(–µ–π)`);
      }
    }
    
    // 3. –û—á–∏—â–∞–µ–º localStorage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)
    const shouldClearStorage = confirm(
      '–¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
    );
    
    if (shouldClearStorage) {
      localStorage.clear();
      sessionStorage.clear();
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
    
    console.log('üéâ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    alert('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞:', error);
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞ (Ctrl+Shift+R).');
  }
};

/**
 * –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫—ç—à–µ–π (–±–µ–∑ Service Worker –∏ localStorage)
 */
export const clearOnlyCache = async (): Promise<void> => {
  try {
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      await Promise.all(cacheNames.map(name => caches.delete(name)));
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${cacheNames.length} –∫—ç—à(–µ–π)`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö Service Workers
 */
export const checkServiceWorkers = async (): Promise<void> => {
  if ('serviceWorker' in navigator) {
    const registrations = await navigator.serviceWorker.getRegistrations();
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö Service Workers: ${registrations.length}`);
    
    registrations.forEach((registration, index) => {
      console.log(`SW ${index + 1}:`, {
        scope: registration.scope,
        state: registration.active?.state,
        scriptURL: registration.active?.scriptURL
      });
    });
  }
}; 