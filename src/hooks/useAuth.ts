import { useState, useEffect } from 'react';
import { User, Session, AuthChangeEvent } from '@supabase/supabase-js';
import { supabase, isSupabaseAvailable } from '../utils/supabaseClient';
import { getRedirectUrl, debugAuthUrls } from '../utils/authRedirect';
import { logger } from '../utils/logger';
import { 
  isIOSPWA, 
  isIOSSafari, 
  getRecommendedOAuthMethod, 
  showIOSOAuthWarning,
  getIOSOAuthErrorMessage,
  logDeviceInfo 
} from '../utils/iosSupport';

export interface AuthState {
  user: User | null;
  session: Session | null;
  loading: boolean;
  isAuthenticated: boolean;
}

export const useAuth = () => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    session: null,
    loading: true,
    isAuthenticated: false
  });

  useEffect(() => {
    // –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–µ–º—Å—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if (!isSupabaseAvailable()) {
      setAuthState({
        user: null,
        session: null,
        loading: false,
        isAuthenticated: false
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const getSession = async () => {
      try {
        const { data: { session }, error } = await supabase!.auth.getSession();
        if (error) {
          // console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
          setAuthState({
            user: null,
            session: null,
            loading: false,
            isAuthenticated: false
          });
        }
        
        setAuthState({
          user: session?.user || null,
          session: session,
          loading: false,
          isAuthenticated: !!session?.user
        });
      } catch (error) {
        // console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        setAuthState({
          user: null,
          session: null,
          loading: false,
          isAuthenticated: false
        });
      }
    };

    getSession();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { subscription } } = supabase!.auth.onAuthStateChange(
      (event: AuthChangeEvent, session: Session | null) => {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {
          logger.auth(`${event === 'SIGNED_IN' ? '–í—Ö–æ–¥' : '–í—ã—Ö–æ–¥'}: ${session?.user?.email || '–∞–Ω–æ–Ω–∏–º–Ω–æ'}`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è Google OAuth
          if (event === 'SIGNED_IN' && session?.user) {
            // console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ:', {
            //   user_metadata: session.user.user_metadata,
            //   identities: session.user.identities,
            //   app_metadata: session.user.app_metadata
            // });
          }
        }
        
        setAuthState({
          user: session?.user || null,
          session: session,
          loading: false,
          isAuthenticated: !!session?.user
        });
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  const signUpWithPassword = async (email: string, password: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (process.env.NODE_ENV === 'development') {
      debugAuthUrls();
    }

    const { data, error } = await supabase!.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }

    return data;
  };

  // –í—Ö–æ–¥ —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  const signInWithPassword = async (email: string, password: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { data, error } = await supabase!.auth.signInWithPassword({
      email,
      password
    });

    if (error) {
      throw error;
    }

    return data;
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  const resetPassword = async (email: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { error } = await supabase!.auth.resetPasswordForEmail(email, {
      redirectTo: getRedirectUrl()
    });

    if (error) {
      throw error;
    }
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
  const resendConfirmation = async (email: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { error } = await supabase!.auth.resend({
      type: 'signup',
      email,
      options: {
        emailRedirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }
  };

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email (magic link) - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const signInWithEmail = async (email: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { error } = await supabase!.auth.signInWithOtp({
      email,
      options: {
        emailRedirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }
  };

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  const signInWithGoogle = async () => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (process.env.NODE_ENV === 'development') {
      debugAuthUrls();
      logDeviceInfo();
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è iOS PWA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!showIOSOAuthWarning()) {
      return;
    }

    const oauthMethod = getRecommendedOAuthMethod();
    
    try {
      if (oauthMethod === 'external' && isIOSPWA()) {
        // –î–ª—è iOS PWA –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –≤–Ω–µ—à–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
        const authUrl = `https://umvghchvnsuqnxrvzhct.supabase.co/auth/v1/authorize?provider=google&redirect_to=${encodeURIComponent(getRedirectUrl())}&prompt=select_account`;
        window.open(authUrl, '_blank');
        return;
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OAuth flow
      const { error } = await supabase!.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: getRedirectUrl(),
          queryParams: {
            access_type: 'offline',
            prompt: 'select_account'
          }
        }
      });

      if (error) {
        throw error;
      }
    } catch (error) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è iOS
      const errorMessage = getIOSOAuthErrorMessage(error);
      throw new Error(errorMessage);
    }
  };

  // –í—ã—Ö–æ–¥
  const signOut = async () => {
    logger.auth(`useAuth: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${authState.user?.email}`);
    
    try {
      // 1. –í—ã—Ö–æ–¥ –∏–∑ Supabase
      if (isSupabaseAvailable() && supabase) {
        const { error } = await supabase.auth.signOut();
        if (error) throw error;
      }
      
      // 2. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö Supabase –∫–ª—é—á–µ–π
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('sb-')) {
          localStorage.removeItem(key);
        }
      });
      
      // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      logger.auth('–û–±–Ω–æ–≤–ª—è–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...');
      window.dispatchEvent(new CustomEvent('wishlistDataUpdated'));
      window.dispatchEvent(new CustomEvent('categoriesUpdated'));
      
      logger.auth('–í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      // console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    }
  };

  return {
    ...authState,
    signUpWithPassword,
    signInWithPassword,
    resetPassword,
    resendConfirmation,
    signInWithEmail, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    signInWithGoogle,
    signOut,
    isSupabaseAvailable: isSupabaseAvailable()
  };
}; 