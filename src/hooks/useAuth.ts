import { useState, useEffect } from 'react';
import { User, Session, AuthChangeEvent } from '@supabase/supabase-js';
import { supabase, isSupabaseAvailable } from '../utils/supabaseClient';
import { getRedirectUrl, debugAuthUrls } from '../utils/authRedirect';

export interface AuthState {
  user: User | null;
  session: Session | null;
  loading: boolean;
  isAuthenticated: boolean;
}

export const useAuth = () => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    session: null,
    loading: true,
    isAuthenticated: false
  });

  useEffect(() => {
    // –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–µ–º—Å—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if (!isSupabaseAvailable()) {
      setAuthState({
        user: null,
        session: null,
        loading: false,
        isAuthenticated: false
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const getSession = async () => {
      try {
        const { data: { session }, error } = await supabase!.auth.getSession();
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
        
        setAuthState({
          user: session?.user || null,
          session: session,
          loading: false,
          isAuthenticated: !!session?.user
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        setAuthState({
          user: null,
          session: null,
          loading: false,
          isAuthenticated: false
        });
      }
    };

    getSession();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { subscription } } = supabase!.auth.onAuthStateChange(
      (event: AuthChangeEvent, session: Session | null) => {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {
          console.log(`üîê ${event === 'SIGNED_IN' ? '–í—Ö–æ–¥' : '–í—ã—Ö–æ–¥'}:`, session?.user?.email || '–∞–Ω–æ–Ω–∏–º–Ω–æ');
        }
        
        setAuthState({
          user: session?.user || null,
          session: session,
          loading: false,
          isAuthenticated: !!session?.user
        });
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  const signUpWithPassword = async (email: string, password: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (process.env.NODE_ENV === 'development') {
      debugAuthUrls();
    }

    const { data, error } = await supabase!.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }

    return data;
  };

  // –í—Ö–æ–¥ —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  const signInWithPassword = async (email: string, password: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { data, error } = await supabase!.auth.signInWithPassword({
      email,
      password
    });

    if (error) {
      throw error;
    }

    return data;
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  const resetPassword = async (email: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { error } = await supabase!.auth.resetPasswordForEmail(email, {
      redirectTo: getRedirectUrl()
    });

    if (error) {
      throw error;
    }
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
  const resendConfirmation = async (email: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { error } = await supabase!.auth.resend({
      type: 'signup',
      email,
      options: {
        emailRedirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }
  };

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email (magic link) - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const signInWithEmail = async (email: string) => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const { error } = await supabase!.auth.signInWithOtp({
      email,
      options: {
        emailRedirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }
  };

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
  const signInWithGoogle = async () => {
    if (!isSupabaseAvailable()) {
      throw new Error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (process.env.NODE_ENV === 'development') {
      debugAuthUrls();
    }

    const { error } = await supabase!.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: getRedirectUrl()
      }
    });

    if (error) {
      throw error;
    }
  };

  // –í—ã—Ö–æ–¥
  const signOut = async () => {
    console.log('üö™ useAuth: signOut –≤—ã–∑–≤–∞–Ω');
    console.log('üîß useAuth: isSupabaseAvailable:', isSupabaseAvailable());
    
    if (!isSupabaseAvailable()) {
      console.log('‚ö†Ô∏è useAuth: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞');
      return;
    }

    console.log('üîÑ useAuth: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –≤ Supabase...');
    
    try {
      const { error } = await supabase!.auth.signOut();
      if (error) {
        console.error('‚ùå useAuth: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –æ—Ç Supabase:', error);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "—Å–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", —Ç–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if (error.message?.includes('Auth session missing') || error.message?.includes('session not found')) {
          console.log('‚ÑπÔ∏è useAuth: –°–µ—Å—Å–∏—è —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
          throw error;
        }
      }
      
      console.log('‚úÖ useAuth: Supabase –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ö–æ–¥–∞');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
      try {
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && key.startsWith('sb-')) {
            keysToRemove.push(key);
          }
        }
        keysToRemove.forEach(key => localStorage.removeItem(key));
        console.log('üßπ useAuth: –û—á–∏—â–µ–Ω—ã Supabase –∫–ª—é—á–∏ –∏–∑ localStorage:', keysToRemove);
      } catch (storageError) {
        console.warn('‚ö†Ô∏è useAuth: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å localStorage:', storageError);
      }
    } catch (error) {
      console.error('‚ùå useAuth: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      
      // –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—à–∏–±–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('üßπ useAuth: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
      setAuthState({
        user: null,
        session: null,
        loading: false,
        isAuthenticated: false
      });
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ Supabase –∏–∑ localStorage
      try {
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key && key.startsWith('sb-')) {
            keysToRemove.push(key);
          }
        }
        keysToRemove.forEach(key => localStorage.removeItem(key));
        console.log('üßπ useAuth: –û—á–∏—â–µ–Ω—ã Supabase –∫–ª—é—á–∏ –∏–∑ localStorage:', keysToRemove);
      } catch (storageError) {
        console.warn('‚ö†Ô∏è useAuth: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å localStorage:', storageError);
      }
      
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - —Å—á–∏—Ç–∞–µ–º –≤—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω—ã–º
      return;
    }
  };

  return {
    ...authState,
    signUpWithPassword,
    signInWithPassword,
    resetPassword,
    resendConfirmation,
    signInWithEmail, // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    signInWithGoogle,
    signOut,
    isSupabaseAvailable: isSupabaseAvailable()
  };
}; 