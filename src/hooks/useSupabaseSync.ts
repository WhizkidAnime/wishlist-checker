import { useState, useEffect, useCallback } from 'react';
import { WishlistItem } from '../types/wishlistItem';
import { supabase, isSupabaseAvailable } from '../utils/supabaseClient';
import { loadFromLocalStorage, saveToLocalStorage } from '../utils/localStorageUtils';
import { logger } from '../utils/logger';

// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
interface InternalSyncState {
  isProcessing: boolean;
  lastProcessedHash: string | null;
}

const SYNC_KEYS = {
  wishlist: 'wishlistApp',
  categories: 'wishlistCategories',
  theme: 'wishlist-theme-mode',
  lastModified: 'wishlist-last-modified',
  dataHash: 'wishlist-data-hash'
} as const;

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏ (5 —Å–µ–∫—É–Ω–¥)
const MIN_SYNC_INTERVAL = 5000;
let lastSyncTime = 0;

export const useSupabaseSync = (userId: string | null) => {
  const [internalState, setInternalState] = useState<InternalSyncState>({
    isProcessing: false,
    lastProcessedHash: null
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const notifyDataUpdated = useCallback(() => {
    window.dispatchEvent(new CustomEvent('wishlistDataUpdated'));
    window.dispatchEvent(new CustomEvent('categoriesUpdated'));
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const generateDataHash = useCallback((items: WishlistItem[], categories: string[], theme: string) => {
    const data = JSON.stringify({ items, categories, theme });
    let hash = 0;
    for (let i = 0; i < data.length; i++) {
      const char = data.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString();
  }, []);

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Supabase
  const convertToSupabaseItem = (item: WishlistItem, userId: string) => ({
    user_id: userId,
    name: item.name,
    item_type: item.itemType || null,
    link: item.link || '',
    price: Number(item.price),
    currency: item.currency,
    is_bought: item.isBought,
    comment: item.comment || '',
    category: item.category || null,
    sort_order: 0
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ Supabase –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const convertFromSupabaseItem = (dbItem: any): WishlistItem => ({
    id: dbItem.id,
    itemType: dbItem.item_type || '',
    name: dbItem.name,
    link: dbItem.link || '',
    price: Number(dbItem.price),
    currency: dbItem.currency,
    isBought: dbItem.is_bought,
    comment: dbItem.comment || '',
    category: dbItem.category || undefined
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const needsSync = useCallback((forcedCheck = false) => {
    if (!userId || !isSupabaseAvailable()) return false;

    // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (!forcedCheck) {
      const now = Date.now();
      if (now - lastSyncTime < MIN_SYNC_INTERVAL) {
        return false;
      }
    }

    const localItems: WishlistItem[] = loadFromLocalStorage(SYNC_KEYS.wishlist) || [];
    const localCategories: string[] = loadFromLocalStorage(SYNC_KEYS.categories) || [];
    const localTheme: string = loadFromLocalStorage(SYNC_KEYS.theme) || 'light';
    
    const currentHash = generateDataHash(localItems, localCategories, localTheme);
    const lastHash = internalState.lastProcessedHash;

    return currentHash !== lastHash;
  }, [userId, generateDataHash, internalState.lastProcessedHash]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const syncWishlistItems = useCallback(async (userId: string) => {
    if (!isSupabaseAvailable() || !supabase) return false;

    try {
      const localItems: WishlistItem[] = loadFromLocalStorage(SYNC_KEYS.wishlist) || [];

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã
      const { data: remoteItems, error } = await supabase
        .from('wishlist_items')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (error) throw error;

      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ –±–∞–∑—ã
      console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê syncWishlistItems:');
      console.log('üìä userId:', userId);
      console.log('üìä remoteItems count:', remoteItems?.length || 0);
      console.log('üìä localItems count:', localItems.length);
      if (remoteItems && remoteItems.length > 0) {
        console.log('üìä –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã:', remoteItems.slice(0, 3).map(item => ({
          id: item.id,
          name: item.name,
          user_id: item.user_id
        })));
      }

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ –∫–æ–¥–µ!
      // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ RLS policies –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Supabase
      const safeRemoteItems = remoteItems?.filter(item => item.user_id === userId) || [];
      
      console.log('üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ user_id:', safeRemoteItems.length);
      if (safeRemoteItems.length !== (remoteItems?.length || 0)) {
        console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: RLS policies –ù–ï –†–ê–ë–û–¢–ê–Æ–¢! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
        console.error('üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', remoteItems?.length || 0);
        console.error('üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', safeRemoteItems.length);
      }

      const remoteIds = new Set(safeRemoteItems.map(item => item.id));
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (safeRemoteItems && safeRemoteItems.length > 0 && localItems.length === 0) {
        // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
        const convertedItems = safeRemoteItems.map(convertFromSupabaseItem);
        saveToLocalStorage(SYNC_KEYS.wishlist, convertedItems);
        notifyDataUpdated();
        logger.sync(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${convertedItems.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞`);
        return true;
      } else if (localItems.length > 0) {
        // –ï—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const newItems = localItems.filter(item => !remoteIds.has(item.id));
        
        if (newItems.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          const supabaseItems = newItems.map(item => convertToSupabaseItem(item, userId));
          
          const { error: insertError } = await supabase
            .from('wishlist_items')
            .insert(supabaseItems);

          if (insertError) throw insertError;
          logger.sync(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newItems.length} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–±–ª–∞–∫–æ`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const existingItems = localItems.filter(item => remoteIds.has(item.id));
        for (const localItem of existingItems) {
          const remoteItem = safeRemoteItems.find(r => r.id === localItem.id);
          if (remoteItem) {
            const localConverted = convertToSupabaseItem(localItem, userId);
            const needsUpdate = 
              localConverted.name !== remoteItem.name ||
              localConverted.price !== remoteItem.price ||
              localConverted.is_bought !== remoteItem.is_bought ||
              localConverted.comment !== remoteItem.comment;
              
            if (needsUpdate) {
              const { error: updateError } = await supabase
                .from('wishlist_items')
                .update(localConverted)
                .eq('id', localItem.id);
                
              if (updateError) throw updateError;
              logger.sync(`–û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–≤–∞—Ä: ${localItem.name}`);
            }
          }
        }
        
        return newItems.length > 0;
      }

      return false;
    } catch (error) {
      logger.sync('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return false;
    }
  }, [notifyDataUpdated]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const syncCategories = useCallback(async (userId: string) => {
    if (!isSupabaseAvailable() || !supabase) return false;

    try {
      const localCategories: string[] = loadFromLocalStorage(SYNC_KEYS.categories) || [];

      const { data: remoteCategories, error } = await supabase
        .from('user_categories')
        .select('name, user_id')
        .eq('user_id', userId);

      if (error) throw error;

      // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∫–æ–¥–µ!
      // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ RLS policies –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ Supabase  
      const safeCategoriesData = remoteCategories?.filter((cat: any) => cat.user_id === userId) || [];
      console.log('üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ user_id:', safeCategoriesData.length);
      
      if (safeCategoriesData.length !== (remoteCategories?.length || 0)) {
        console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: RLS –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ù–ï –†–ê–ë–û–¢–ê–ï–¢!');
      }

      if (safeCategoriesData && safeCategoriesData.length > 0) {
        const categoryNames = safeCategoriesData.map((cat: { name: string }) => cat.name);
        saveToLocalStorage(SYNC_KEYS.categories, categoryNames);
        notifyDataUpdated();
        logger.sync(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${categoryNames.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –æ–±–ª–∞–∫–∞`);
        return true;
      } else if (localCategories.length > 0) {
        const categoriesToInsert = localCategories.map(name => ({
          user_id: userId,
          name
        }));

        const { error: insertError } = await supabase
          .from('user_categories')
          .insert(categoriesToInsert);

        if (insertError) throw insertError;

        logger.sync(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${localCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ–±–ª–∞–∫–æ`);
        return true;
      }

      return false;
    } catch (error) {
      logger.sync('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return false;
    }
  }, [notifyDataUpdated]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
  const syncTheme = useCallback(async (userId: string) => {
    if (!isSupabaseAvailable() || !supabase) return false;

    try {
      const localTheme = loadFromLocalStorage(SYNC_KEYS.theme) || 'light';

      const { data: preferences, error } = await supabase
        .from('user_preferences')
        .select('theme')
        .eq('user_id', userId)
        .single();

      if (error && error.code !== 'PGRST116') {
        throw error;
      }

      if (preferences) {
        saveToLocalStorage(SYNC_KEYS.theme, preferences.theme);
        logger.sync(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–º–∞ –∏–∑ –æ–±–ª–∞–∫–∞: ${preferences.theme}`);
        return true;
      } else {
        const { error: insertError } = await supabase
          .from('user_preferences')
          .insert({
            user_id: userId,
            theme: localTheme
          });

        if (insertError) throw insertError;

        logger.sync(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–º–∞ –≤ –æ–±–ª–∞–∫–æ: ${localTheme}`);
        return true;
      }
    } catch (error) {
      logger.sync('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã:', error);
      return false;
    }
  }, []);

  // –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ
  const syncInBackground = useCallback(async () => {
    if (!userId || !isSupabaseAvailable()) return;
    
    if (internalState.isProcessing) {
      return;
    }

    if (!needsSync()) {
      return;
    }

    setInternalState(prev => ({ ...prev, isProcessing: true }));
    lastSyncTime = Date.now();

    try {
      logger.sync('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
      
      await Promise.all([
        syncWishlistItems(userId),
        syncCategories(userId),
        syncTheme(userId)
      ]);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const localItems: WishlistItem[] = loadFromLocalStorage(SYNC_KEYS.wishlist) || [];
      const localCategories: string[] = loadFromLocalStorage(SYNC_KEYS.categories) || [];
      const localTheme: string = loadFromLocalStorage(SYNC_KEYS.theme) || 'light';
      const newHash = generateDataHash(localItems, localCategories, localTheme);

      setInternalState(prev => ({ 
        ...prev, 
        isProcessing: false,
        lastProcessedHash: newHash
      }));

      logger.sync('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      setInternalState(prev => ({ ...prev, isProcessing: false }));
      logger.sync('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }, [userId, needsSync, syncWishlistItems, syncCategories, syncTheme, generateDataHash, internalState.isProcessing]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—É–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö)
  const triggerSync = useCallback(async () => {
    if (!userId || !isSupabaseAvailable()) return;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setInternalState(prev => ({ ...prev, lastProcessedHash: null }));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (needsSync(true)) {
      await syncInBackground();
    }
  }, [userId, needsSync, syncInBackground]);

  // –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  useEffect(() => {
    // üö® –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á—É–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üî¥ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê: RLS policies –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
    return;
    
    if (userId && isSupabaseAvailable()) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      if (needsSync()) {
        syncInBackground();
      }
    }
  }, [userId, syncInBackground, needsSync]);

  return {
    triggerSync,
    isSupabaseAvailable: isSupabaseAvailable()
  };
}; 