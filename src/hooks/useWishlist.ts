import { useState, useEffect, useMemo, useRef } from 'react';
import { arrayMove } from '@dnd-kit/sortable';
import { DragEndEvent } from '@dnd-kit/core';
import { WishlistItem } from '../types/wishlistItem';
import { loadFromLocalStorage, saveToLocalStorage } from '../utils/localStorageUtils';

const LOCAL_STORAGE_KEY = 'wishlistApp';

export const useWishlist = (
  triggerSync?: () => void, 
  isAuthenticated?: boolean, 
  deleteFromSupabase?: (itemId: string | number) => Promise<boolean>
) => {
  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
  const skipNextSync = useRef(false);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const [wishlist, setWishlist] = useState<WishlistItem[]>(() => {
    if (isAuthenticated) {
      return loadFromLocalStorage(LOCAL_STORAGE_KEY) || [];
    }
    return [];
  });
  
  const [editingItemId, setEditingItemId] = useState<string | number | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState<'default' | 'type-asc' | 'price-asc' | 'price-desc'>('default');

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  useEffect(() => {
    if (isAuthenticated === false) {
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      setWishlist([]);
      setEditingItemId(null);
      setSearchQuery('');
      setSortBy('default');
      
      // –û—á–∏—â–∞–µ–º localStorage –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      try {
        localStorage.removeItem(LOCAL_STORAGE_KEY);
        localStorage.removeItem('wishlistCategories');
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å localStorage:', error);
      }
    } else if (isAuthenticated === true) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
      const savedData = loadFromLocalStorage(LOCAL_STORAGE_KEY) || [];
      setWishlist(savedData);
    }
  }, [isAuthenticated]);

  // –°–ª—É—à–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
  useEffect(() => {
    if (!isAuthenticated) return;

    const handleDataUpdate = () => {
      const updatedData = loadFromLocalStorage(LOCAL_STORAGE_KEY) || [];
      setWishlist(updatedData);
    };

    window.addEventListener('wishlistDataUpdated', handleDataUpdate);
    return () => window.removeEventListener('wishlistDataUpdated', handleDataUpdate);
  }, [isAuthenticated]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (!isAuthenticated) return;
    
    saveToLocalStorage(LOCAL_STORAGE_KEY, wishlist);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ skipNextSync –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (skipNextSync.current) {
      skipNextSync.current = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if (triggerSync) {
      triggerSync();
    }
  }, [wishlist, triggerSync, isAuthenticated]);

  // –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
  const getFilteredAndSortedItems = (items: WishlistItem[]) => {
    const query = searchQuery.toLowerCase().trim();
    
    let filtered = query 
      ? items.filter(item => 
          item.name.toLowerCase().includes(query) || 
          (item.itemType && item.itemType.toLowerCase().includes(query))
        )
      : [...items];

    switch (sortBy) {
      case 'price-asc':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-desc':
        filtered.sort((a, b) => b.price - a.price);
        break;
      case 'type-asc':
        filtered.sort((a, b) => {
          const typeA = a.itemType?.toLowerCase() || '';
          const typeB = b.itemType?.toLowerCase() || '';
          const typeCompare = typeA.localeCompare(typeB);
          if (typeCompare !== 0) {
            return typeCompare;
          }
          return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
        });
        break;
    }

    const unbought: WishlistItem[] = [];
    const bought: WishlistItem[] = [];
    filtered.forEach(item => {
      if (item.isBought) {
        bought.push(item);
      } else {
        unbought.push(item);
      }
    });
    return [...unbought, ...bought];
  };

  const filteredAndSortedWishlist = useMemo(() => {
    return getFilteredAndSortedItems(wishlist);
  }, [wishlist, searchQuery, sortBy]);

  const totalUnbought = useMemo(() => {
    return wishlist
      .filter(item => !item.isBought)
      .reduce((sum, item) => sum + item.price, 0);
  }, [wishlist]);

  const totalBought = useMemo(() => {
    return wishlist
      .filter(item => item.isBought)
      .reduce((sum, item) => sum + item.price, 0);
  }, [wishlist]);

  const handleAddItem = (newItem: Omit<WishlistItem, 'id' | 'isBought'>) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
    const uniqueId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const itemToAdd: WishlistItem = { 
      ...newItem, 
      id: uniqueId,
      isBought: false 
    };
    setWishlist([itemToAdd, ...wishlist]);
  };

  const handleUpdateItem = (updatedItem: WishlistItem) => {
    setWishlist(wishlist.map(item => (item.id === updatedItem.id ? updatedItem : item)));
    setEditingItemId(null);
  };

  const handleToggleBought = (id: string | number) => {
    setWishlist(wishlist.map(item => 
      item.id === id ? { ...item, isBought: !item.isBought } : item
    ));
  };

  const handleMoveItem = (id: string | number, direction: 'up' | 'down') => {
    const currentIndex = wishlist.findIndex(item => item.id === id);
    
    if (currentIndex === -1) return;
    
    const newIndex = direction === 'up' 
      ? Math.max(0, currentIndex - 1)
      : Math.min(wishlist.length - 1, currentIndex + 1);
    
    if (currentIndex !== newIndex) {
      setWishlist(currentList => arrayMove(currentList, currentIndex, newIndex));
    }
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const {active, over} = event;
    if (over && active.id !== over.id) {
      setWishlist((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        return arrayMove(items, oldIndex, newIndex); 
      });
    }
  };

  const handleDeleteItem = async (id: string | number): Promise<void> => {
    console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', id);
    
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Supabase –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
      if (deleteFromSupabase && isAuthenticated) {
        const deleteSuccess = await deleteFromSupabase(id);
        if (!deleteSuccess) {
          // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Supabase –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Supabase');
      }
      
      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º localStorage, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å race condition
      const updatedWishlist = wishlist.filter(item => item.id !== id);
      saveToLocalStorage(LOCAL_STORAGE_KEY, updatedWishlist);
      console.log('üíæ localStorage –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      skipNextSync.current = true;
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setWishlist(updatedWishlist);
      console.log('üîÑ React —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      window.dispatchEvent(new CustomEvent('wishlistDataUpdated'));
      
      console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    }
  };

  return {
    wishlist,
    setWishlist,
    editingItemId,
    setEditingItemId,
    searchQuery,
    setSearchQuery,
    sortBy,
    setSortBy,
    filteredAndSortedWishlist,
    getFilteredAndSortedItems,
    totalUnbought,
    totalBought,
    handleAddItem,
    handleUpdateItem,
    handleToggleBought,
    handleMoveItem,
    handleDragEnd,
    handleDeleteItem,
    handleEditClick: setEditingItemId,
    handleCancelEdit: () => setEditingItemId(null)
  };
}; 