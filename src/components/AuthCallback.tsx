import React, { useEffect, useState } from 'react';
import { supabase, isSupabaseAvailable } from '../utils/supabaseClient';

export const AuthCallback: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const handleAuthCallback = async () => {
      console.log('üîÑ AuthCallback: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
      console.log('üåê AuthCallback: URL:', window.location.href);
      console.log('üîç AuthCallback: Search params:', window.location.search);
      console.log('üìç AuthCallback: Hash:', window.location.hash);
      
      if (!isSupabaseAvailable()) {
        console.error('‚ùå AuthCallback: Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        setError('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        setLoading(false);
        return;
      }

      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        const hashParams = new URLSearchParams(window.location.hash.slice(1)); // —É–±–∏—Ä–∞–µ–º #
        
        console.log('üìã AuthCallback: URL params:', Object.fromEntries(urlParams));
        console.log('üìã AuthCallback: Hash params:', Object.fromEntries(hashParams));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        const code = urlParams.get('code') || hashParams.get('code');
        const accessToken = urlParams.get('access_token') || hashParams.get('access_token');
        const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token');
        
        console.log('üîë AuthCallback: Code:', code ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üîë AuthCallback: Access token:', accessToken ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üîë AuthCallback: Refresh token:', refreshToken ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        if (code) {
          console.log('‚úÖ AuthCallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º code flow');
          // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Å–µ—Å—Å–∏—é
          const { data, error } = await supabase!.auth.exchangeCodeForSession(code);
          
          if (error) {
            console.error('‚ùå AuthCallback: –û—à–∏–±–∫–∞ exchangeCodeForSession:', error);
            throw error;
          }
          
          console.log('‚úÖ AuthCallback: –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', data.session?.user?.email);
          
        } else if (accessToken && refreshToken) {
          console.log('‚úÖ AuthCallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º token flow');
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–æ–∫–µ–Ω–∞–º–∏
          const { data, error } = await supabase!.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken
          });
          
          if (error) {
            console.error('‚ùå AuthCallback: –û—à–∏–±–∫–∞ setSession:', error);
            throw error;
          }
          
          console.log('‚úÖ AuthCallback: –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', data.session?.user?.email);
          
        } else {
          console.warn('‚ö†Ô∏è AuthCallback: –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          // –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞
          const errorDescription = urlParams.get('error_description') || hashParams.get('error_description');
          const errorCode = urlParams.get('error') || hashParams.get('error');
          
          if (errorDescription || errorCode) {
            console.error('‚ùå AuthCallback: –û—à–∏–±–∫–∞ –≤ URL:', { errorCode, errorDescription });
            throw new Error(errorDescription || `–û—à–∏–±–∫–∞: ${errorCode}`);
          }
        }
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        console.log('‚è≥ AuthCallback: –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        console.log('üè† AuthCallback: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é...');
        window.location.href = '/wishlist-checker/';
        
      } catch (error) {
        console.error('‚ùå AuthCallback: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        setError(error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        setLoading(false);
      }
    };

    handleAuthCallback();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-theme-background">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-theme-primary mx-auto mb-4"></div>
          <p className="text-theme-text">–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç...</p>
        </div>
      </div>
    );
  }

  if (error) {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    React.useEffect(() => {
      const timer = setTimeout(() => {
        window.location.href = '/wishlist-checker/';
      }, 3000);
      
      return () => clearTimeout(timer);
    }, []);

    return (
      <div className="min-h-screen flex items-center justify-center bg-theme-background">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="text-amber-500 text-4xl mb-4">‚è∞</div>
          <h1 className="text-xl font-bold text-theme-primary mb-2">
            –°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
          </h1>
          <p className="text-theme-text mb-4">
            –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞.
          </p>
          <p className="text-sm text-gray-500 mb-4">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...
          </p>
          <button
            onClick={() => window.location.href = '/wishlist-checker/'}
            className="px-4 py-2 bg-theme-primary text-white rounded-lg hover:opacity-90 transition-colors"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  return null;
}; 